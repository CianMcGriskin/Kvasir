#include "FaceDetection.h"

// Initialisation of variable
unsigned long FaceDetection::numOfFacesDetected = 0;

// Constructor to initalise caffe model
FaceDetection::FaceDetection() {
    std::string protoPath = "../../Kvasir/Components/Models/FaceDetectionCaffeModel/deploy.prototxt";
    std::string caffeModelPath = "../../Kvasir/Components/Models/FaceDetectionCaffeModel/res10_300x300_ssd_iter_140000_fp16.caffemodel";
    faceDetectionModel = cv::dnn::readNetFromCaffe(protoPath, caffeModelPath);
}

// Function used to detect faces within an image
void FaceDetection::DetectFaces(cv::Mat &image, float confidenceLevel, bool display) {
    auto startTime = std::chrono::high_resolution_clock::now();
    int imageHeight = image.rows;
    int imageWidth = image.cols;

    // Mean and size for the model params
    cv::Size size = cv::Size(300, 300);
    cv::Scalar blobMean = cv::Scalar(104.0, 117.0, 123.0);

    // Clone image to process it
    cv::Mat outputImage = image.clone();

    // Save face images in a vector
    std::vector<cv::Mat> croppedFaces;

    // Process image
    cv::Mat preprocessedImage;
    cv::dnn::blobFromImage(image, preprocessedImage, 1.0, size, blobMean, false, false);

    // Set image as input
    faceDetectionModel.setInput(preprocessedImage);
    cv::Mat results = faceDetectionModel.forward();


    cv::Mat detectionMat(results.size[2], results.size[3], CV_32F, results.ptr<float>());

    std::string outputDirectory = "../../Kvasir/Components/Output";

    for (int i = 0; i < detectionMat.rows; ++i) {
        float confidence = detectionMat.at<float>(i, 2);

        if (confidence > confidenceLevel)
        {
            int x1 = static_cast<int>(detectionMat.at<float>(i, 3) * imageWidth);
            int y1 = static_cast<int>(detectionMat.at<float>(i, 4) * imageHeight);
            int x2 = static_cast<int>(detectionMat.at<float>(i, 5) * imageWidth);
            int y2 = static_cast<int>(detectionMat.at<float>(i, 6) * imageHeight);

            cv::Rect faceRegion(x1, y1, x2 - x1, y2 - y1);
            try
            {
                cv::Mat croppedFace = image(faceRegion).clone();
                croppedFaces.push_back(croppedFace);
            }
            catch (cv::Exception & e)
            {
                std::cerr << e.msg << std::endl;
            }


            cv::rectangle(outputImage, cv::Point(x1, y1), cv::Point(x2, y2), cv::Scalar(0, 255, 0), imageWidth / 200);
//            cv::rectangle(outputImage, cv::Point(x1, y1 - imageWidth / 20), cv::Point(x1 + imageWidth / 16, y1), cv::Scalar(0, 255, 0), -1);
//            std::string conf_str = std::to_string(static_cast<int>(confidence * 100)) + "%";
//            cv::putText(outputImage, conf_str, cv::Point(x1, y1 - 25), cv::FONT_HERSHEY_COMPLEX, imageWidth / 700, cv::Scalar(255, 255, 255), imageWidth / 200);
        }
    }

    numOfFacesDetected = croppedFaces.size();

    if (display)
    {
        cv::imshow("Output", outputImage);
        cv::waitKey(0);
    }

    for (size_t i = 0; i < croppedFaces.size(); ++i) {
        std::string filename = outputDirectory + "/cropped_face_" + std::to_string(i + 1) + ".jpg";
        cv::imwrite(filename, croppedFaces[i]);
        cv::imshow("Cropped Face " + std::to_string(i + 1), croppedFaces[i]);
        cv::waitKey(0);
    }

    auto endTime = std::chrono::high_resolution_clock::now();
    auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(endTime - startTime);
    std::cout << "DetectFaces execution time: " << duration.count() << " milliseconds" << std::endl;
}

double FaceDetection::CompareFaces(std::vector<double> vec, short size) {
    double dotProduct = 0.0;
    double normA = 0.0;
    double normB = 0.0;

    std::vector<double> vectorToCompareTo = {
            -0.0192913, 0.0631263, -0.0486528, 0.00706732,
            0.010362, -0.0118584, -0.0402209, 0.0916429, 0.0194439,
            0.0611298, 0.0245832, 0.0137139, -0.000519408, 0.0176983,
            -0.0612355, 0.00526584, -0.0266787, 0.0475187, -0.0611942,
            -0.0535553, -0.0667394, 0.0239138, 0.0296173, -0.0397586,
            0.0131856, -0.0251751, -0.00283532, -0.0201895, -0.008617,
            -0.0355576, 0.00156883, -0.0298467, 0.0316036, 0.028763,
            0.020376, 0.0369393, 0.0139503, -0.0485528, -0.0606783,
            -0.0276047, -0.0432704, 0.0392679, 0.0822978, 0.0186477,
            -0.00276443, 0.0341809, -0.0820952, 0.0237146, -0.0488825,
            -0.0271324, 0.0483928, -0.00630799, 0.00501593, -0.0471099,
            -0.044028, 0.0366404, -0.0906478, -0.0392717, -0.0561039,
            -0.0017817, 0.0158711, 0.0364057, -0.0221846, 0.0255917,
            -0.0487862, -0.0656773, -0.0329217, 0.0387292, 0.111278,
            0.0480308, 0.0142837, -0.0542503, 0.0104602, -0.0266599,
            0.0777679, -0.0435169, -0.0126827, 0.044028, 0.0429089,
            0.0326238, 0.0320901, 0.017741, -0.00645288, -0.0168238,
            -0.0133779, 0.0977814, 0.026389, 0.0327602, -0.00623146,
            0.000272667, -0.0809876, -0.0244406, 0.0334892, -0.0226459,
            -0.059027, 0.0410865, 0.0190344, -0.0192619, 0.0383944,
            0.0351263, 0.0119631, 0.0692151, 0.0059612, 0.0306305,
            -0.0269937, 0.0185867, -0.0209151, -0.0623848, 0.0621185,
            -0.0595014, 0.0304477, -0.020128, 0.0499197, -0.000909282,
            0.0409812, 0.0477766, 0.0400979, 0.0024251, -0.0458908,
            0.00330659, 0.0372782, -0.0141612, -0.0649711, 0.0367151,
            -0.0136008, -0.0833586, -0.033348, 0.0489179, -0.00906529,
            0.0598837, -0.0200257, -0.0209803, 0.0309474, -0.0486029, 0.0411654, 0.0104583, 0.0379394, -0.0952817, 0.00669204, 0.0591794, 0.0151383, 0.0162043, 0.00999635, -0.0146678, 0.00561079, -0.030114, -0.0122837, 0.0645997, -0.0216646, -0.0216783, -0.0578874, -0.0664852, 0.00457327, 0.0673802, 0.0311605, -0.0593972, 0.00801906, 0.00115035, -0.056344, -0.103747, 0.0725377, 0.107161, -0.0153492, -0.0405623, 0.122452, -0.0245429, -0.042558, 0.0389098, -0.0746271, 0.0567271, -0.0307898, 0.00727557, -0.0473832, 0.0823217, -0.00300039, -0.0467555, 0.0461455, 0.0441313, -0.120549, 0.0338449, 0.0106321, 0.0100746, 0.0366028, 0.00639823, 0.102255, -0.0109915, -0.000742189, -0.0778019, 0.0438121, 0.0583217, -0.0406937, 0.0849739, 0.0474997, -0.0602567, 0.0467056, 0.0164892, 0.0246917, 0.00220353, 0.109659, -0.0009732, 0.0240964, -0.0249187, 0.0405955, -0.0666912, 0.00825177, -0.0176982, 0.00815231, 0.0210266, -0.0103508, 0.0765868, -0.0234102, 0.00756735, 0.0235561, -0.0365465, 0.0350783, 0.0651658, -0.0227575, 0.0115308, -0.0398581, -0.0450233, 0.0444146, 0.0255246, 0.0906876, 0.0494718, 0.00814045, -0.0322575, -0.0295238, -0.046035, 0.0357838, -0.032278, 0.0176355, 0.0131442, -0.00191674, -0.0180076, -0.00253758, 0.0183834, -0.037768, -0.0545605, 0.03954, 0.0530173, 0.00599045, -0.0210544, -0.0154422, -0.0203648, 0.00507032, 0.10306, 0.0119765, 0.0559802, 0.0464808, 0.0386972, -0.0355375, 0.032072, 0.0845055, 0.0106167, -0.0016267, -0.0394892, -0.008102, 0.0177794, -0.0102449, 0.0129464, 0.00969635, -0.00593673, -0.0280535, -0.0473899, -0.006811, -0.0512751, -0.022239, 0.0145309, -0.0175889, -0.00259982, -0.00534847, -0.0283685, 0.00481874, -0.036529, 0.0664248, 0.0325699, 0.0429236, 0.00988925, -0.00636504, 0.0732875, 0.0079226, -0.0121262, -0.0442497, -0.0418658, 0.00658612, -0.0185923, 0.0511445, 0.0763547, -0.0531173, -0.00697989, 0.0127715, -0.0494172, -0.0402635, 0.0197505, 0.012962, 0.0452569, -0.0494047, 0.0499856, 0.018458, 0.0448091, 0.00705282, 0.0513302, -0.0108517, -0.0241056, 0.0241504, -0.0435583, 0.0576038, -0.061065, -0.0308677, -0.0486181, -0.0784034, 0.0167579, -0.0229259, -0.0410124, 0.146052, -0.0147209, 0.0426123, -0.0185008, 0.0346937, -0.0402669, 0.00751877, -0.0648804, 0.0314221, -0.0107034, -0.0969673, 0.0578631, -0.0668215, 0.0273302, 0.0539416, -0.0112956, 0.0458333, 0.0193252, -0.0593232, 0.0738831, 0.0461521, 0.101474, 0.0114581, 0.0554203, -0.0457318, -0.00482386, 0.025371, 0.0157821, 0.0213569, 0.00542708, 0.0329074, -0.0247069, -0.0495899, 0.060844, 0.0650138, 0.0175458, 0.00682017, -0.0318909, 0.026829, 0.0556512, 0.0345767, -0.0483729, -0.0718799, -0.026018, -0.0599489, -0.0196173, 0.0312957, -0.0225875, -0.0636516, -0.0461382, -0.0445514, 0.00492589, 0.0566781, 0.0629504, 0.0111408, -0.0439448, 0.00107158, -0.00640313, 0.0476914, 0.0570106, -0.0560031, 0.0317807, -0.0338018, 0.0439911, -0.00943357, 0.0254506, 0.0115914, 0.0815465, -0.00818478, 0.0188943, 0.00826763, -0.0726332, -0.0324578, -0.0120149, -0.000918184, -0.00624631, -0.0304009, -0.00743224, -0.0332481, 0.00926342, -0.0648415, -0.0317447, 0.0372687, 0.032948, 0.065082, -0.0203932, -0.00515523, -0.0288751, 0.00526819, 0.00257882, 0.0408158, 0.0191251, 0.0128862, 0.0139744, 0.056742, 0.0057211, 0.0234371, 0.0279579, 0.0681008, 0.0195336, -0.0573942, -0.00736673, 0.0305076, 0.00871131, -0.0297833, 0.0284157, 0.0985354, 0.0292276, -0.0209462, -0.0398508, 0.0332173, 0.0827881, -0.0249704, -0.0621615, 0.0343858, -0.0241038, -0.051818, -0.0506591, -0.0487295, -0.0609924, -0.0119871, 0.000349675, -0.0199574, -0.0383108, -0.0975345, 0.0490576, -0.0606648, 0.0315089, -0.0436358, 0.0459687, -0.0109742, -0.0233787, -0.117292, 0.00526471, 0.0586523, -0.0955519, 0.0479878, 0.00626505, 0.056272, -0.0224227, -0.0526135, -0.0344262, -0.0434872, 0.0677707, 0.0510344, 0.0288177, 0.0541149, 0.0637422, 0.0875013, 0.0157601, 0.0457389, 0.0375359, 0.0453015, -0.0993006, -0.0605642, -0.00901093, -0.0155042, -0.00295707, -0.0595846, -0.0542829, -0.081968, 0.038052, 0.0213283, -0.0644174, 0.095237, 0.00205973, 0.0148301, 0.00587561, -0.0833597, 0.0105066, -0.0220495, -0.017434, -0.0423942, 0.0461631, -0.027849, -0.0477688, 0.0245131, -0.0343935, 0.0355647, 0.0231199, 0.0819099, -0.049035, -0.0213418, 0.024777, -0.0110502, -0.081705, -0.0118781, 0.0220365, -0.00790281, -0.0454876, 0.0166233, 0.0117239, -0.0293129, 0.0206017, 0.0498983, -0.118071, 0.0247232, 0.0108491
    };

    for (size_t i = 0; i < size; ++i)
    {
        dotProduct += vectorToCompareTo[i] * vec[i];
        normA += std::pow(vectorToCompareTo[i], 2);
        normB += std::pow(vec[i], 2);
    }

    if (normA == 0 || normB == 0)
    {
        return 0.0;
    }
    std::cout << "\nSimilarity: " << dotProduct / (std::sqrt(normA) * std::sqrt(normB));
    return dotProduct / (std::sqrt(normA) * std::sqrt(normB));
}

size_t FaceDetection::GetNumOfFacesDetected() {
    return numOfFacesDetected;
}

cv::dnn::Net FaceDetection::GetModel() {
    return faceDetectionModel;
}